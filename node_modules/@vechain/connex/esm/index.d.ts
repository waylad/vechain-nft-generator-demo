/// <reference types="@vechain/connex-types" />
/// <reference types="@vechain/connex-framework/dist/driver-interface" />
/** Vendor class which can work standalone to provides signing-services only */
declare class VendorClass implements Connex.Vendor {
    sign: Connex.Vendor['sign'];
    constructor(genesisId?: 'main' | 'test' | string);
}
/** options for creating Connex object */
export declare type Options = {
    /** the base url of the thor node's thorREST API */
    node: string;
    /**
     * the expected network of the node url. defaults to 'main' if omitted.
     * if it does not match with the actual network of the node url points to,
     * all subsequent request will fail.
     */
    network?: 'main' | 'test' | Connex.Thor.Block;
    /** the flag to disable the compatibility with connex1 environment */
    noV1Compat?: boolean;
};
/** Connex class */
declare class ConnexClass implements Connex {
    static readonly Vendor: typeof VendorClass;
    thor: Connex.Thor;
    vendor: Connex.Vendor;
    constructor(opts: Options);
}
export default ConnexClass;
export { ConnexClass as Connex };
