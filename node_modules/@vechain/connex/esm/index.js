import { Framework } from '@vechain/connex-framework';
import { genesisBlocks } from './config';
import { compat1 } from './compat';
import { createFull, DriverVendorOnly } from './driver';
import { newVendor } from '@vechain/connex-framework';
/** convert options.network to Connex.Thor.Block */
function normalizeNetwork(n) {
    n = n || 'main';
    if (typeof n === 'string') {
        const gb = genesisBlocks[n];
        if (!gb) {
            throw new Error('invalid network');
        }
        return gb;
    }
    else {
        return n;
    }
}
/** convert network name to genesis id */
function normalizeGenesisId(id) {
    id = id || 'main';
    if (/^0x[0-9a-f]{64}$/.test(id)) {
        return id;
    }
    const gb = genesisBlocks[id];
    if (gb) {
        return gb.id;
    }
    throw new Error('invalid genesis id');
}
/** Vendor class which can work standalone to provides signing-services only */
class VendorClass {
    constructor(genesisId) {
        genesisId = normalizeGenesisId(genesisId);
        try {
            // to detect injected connex
            const injected = (window || {}).connex;
            if (injected && injected.thor.genesis.id === genesisId) {
                // injected genesis id matched
                if (/^1\./.test(injected.version)) {
                    // wrap v1 vendor to v2
                    return compat1(injected).vendor;
                }
                return injected.vendor;
            }
        }
        catch ( /**/_a) { /**/ }
        const driver = new DriverVendorOnly(genesisId);
        const vendor = newVendor(driver);
        return {
            get sign() {
                return vendor.sign.bind(vendor);
            }
        };
    }
}
/** Connex class */
class ConnexClass {
    constructor(opts) {
        const genesis = normalizeNetwork(opts.network);
        if (!opts.noV1Compat) {
            try {
                // to detect injected connex
                const injected = (window || {}).connex;
                if (injected && injected.thor.genesis.id === genesis.id) {
                    // injected genesis id matched
                    if (/^1\./.test(injected.version)) {
                        // wrap v1 to v2
                        return compat1(injected);
                    }
                }
            }
            catch ( /**/_a) { /**/ }
        }
        const driver = createFull(opts.node, genesis);
        const framework = new Framework(driver);
        return {
            get thor() { return framework.thor; },
            get vendor() { return framework.vendor; }
        };
    }
}
ConnexClass.Vendor = VendorClass;
export default ConnexClass;
export { ConnexClass as Connex };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDJCQUEyQixDQUFBO0FBQ3JELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFDeEMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFVBQVUsQ0FBQTtBQUNsQyxPQUFPLEVBQUUsVUFBVSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sVUFBVSxDQUFBO0FBQ3ZELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQTtBQUVyRCxtREFBbUQ7QUFDbkQsU0FBUyxnQkFBZ0IsQ0FBQyxDQUFxQjtJQUMzQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLE1BQU0sQ0FBQTtJQUNmLElBQUksT0FBTyxDQUFDLEtBQUssUUFBUSxFQUFFO1FBQ3ZCLE1BQU0sRUFBRSxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUMzQixJQUFJLENBQUMsRUFBRSxFQUFFO1lBQ0wsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO1NBQ3JDO1FBQ0QsT0FBTyxFQUFFLENBQUE7S0FDWjtTQUFNO1FBQ0gsT0FBTyxDQUFDLENBQUE7S0FDWDtBQUNMLENBQUM7QUFFRCx5Q0FBeUM7QUFDekMsU0FBUyxrQkFBa0IsQ0FBQyxFQUE2QjtJQUNyRCxFQUFFLEdBQUcsRUFBRSxJQUFJLE1BQU0sQ0FBQTtJQUNqQixJQUFJLGtCQUFrQixDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRTtRQUM3QixPQUFPLEVBQUUsQ0FBQTtLQUNaO0lBQ0QsTUFBTSxFQUFFLEdBQUcsYUFBYSxDQUFDLEVBQXFCLENBQUMsQ0FBQTtJQUMvQyxJQUFJLEVBQUUsRUFBRTtRQUNKLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQTtLQUNmO0lBQ0QsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQkFB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