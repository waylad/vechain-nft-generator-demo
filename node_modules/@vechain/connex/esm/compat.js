import { abi } from 'thor-devkit';
import * as R from '@vechain/connex-framework/dist/rules';
/** ports connex v1 to connex v2 */
export function compat1(connex1) {
    const t1 = connex1.thor;
    const v1 = connex1.vendor;
    return {
        get thor() {
            const t2 = {
                get genesis() { return t1.genesis; },
                get status() {
                    const s = t1.status;
                    return Object.assign(Object.assign({}, s), { head: Object.assign(Object.assign({}, s.head), { gasLimit: 20000000 }) });
                },
                ticker: () => {
                    const t = t1.ticker();
                    return {
                        next: () => t.next().then(h => (Object.assign(Object.assign({}, h), { gasLimit: 20000000 })))
                    };
                },
                account: addr => {
                    const a1 = t1.account(addr);
                    return {
                        get address() { return a1.address; },
                        get: () => a1.get(),
                        getCode: () => a1.getCode(),
                        getStorage: key => a1.getStorage(key),
                        method: jsonABI => newMethod(a1, jsonABI, this),
                        event: jsonABI => newEvent(a1, jsonABI, this)
                    };
                },
                block: rev => t1.block(rev),
                transaction: id => t1.transaction(id),
                filter: (kind, criteria) => {
                    const f1 = t1.filter(kind);
                    f1.criteria(criteria);
                    return {
                        range(r) { f1.range(r); return this; },
                        order(o) { f1.order(o); return this; },
                        cache() { console.warn('filter :cache is not supported in compat mode'); return this; },
                        apply(offset, limit) {
                            return f1.apply(offset, limit);
                        }
                    };
                },
                explain: (clauses) => {
                    const e1 = t1.explain();
                    return {
                        caller(addr) { e1.caller(addr); return this; },
                        gas(gas) { e1.gas(gas); return this; },
                        gasPrice(gp) { e1.gasPrice(gp); return this; },
                        gasPayer(addr) { console.warn("gasPayer is not supported in compat mode"); return this; },
                        cache() { console.warn('explainer :cache is not supported in compat mode'); return this; },
                        execute: () => e1.execute(clauses)
                    };
                }
            };
            return t2;
        },
        get vendor() {
            return {
                sign: (kind, msg) => {
                    let onAccepted;
                    if (kind === 'tx') {
                        const s1 = v1.sign(kind);
                        const s2 = {
                            signer(addr) { s1.signer(addr); return this; },
                            gas(gas) { s1.gas(gas); return this; },
                            dependsOn(txid) { s1.dependsOn(txid); return this; },
                            link(url) { s1.link(url); return this; },
                            comment(text) { s1.comment(text); return this; },
                            delegate( /*url, signer */) {
                                console.warn('delegate is not supported in compat mode');
                                return this;
                            },
                            accepted(cb) { onAccepted = cb; return this; },
                            request: () => {
                                onAccepted && onAccepted();
                                return s1.request(msg);
                            }
                        };
                        return s2;
                    }
                    else {
                        const s1 = v1.sign(kind);
                        const s2 = {
                            signer(addr) { s1.signer(addr); return this; },
                            link(url) { s1.link(url); return this; },
                            accepted(cb) {
                                onAccepted = cb;
                                return this;
                            },
                            request: () => {
                                onAccepted && onAccepted();
                                return s1.request(msg);
                            }
                        };
                        return s2;
                    }
                }
            };
        }
    };
}
const newMethod = (acc, jsonABI, connex) => {
    const coder = new abi.Function(JSON.parse(JSON.stringify(jsonABI)));
    let value = 0;
    const opts = {};
    return {
        value(val) {
            value = R.test(val, R.bigInt, 'arg0');
            return this;
        },
        caller(addr) {
            opts.caller = R.test(addr, R.address, 'arg0').toLowerCase();
            return this;
        },
        gas(gas) {
            opts.gas = R.test(gas, R.uint64, 'arg0');
            return this;
        },
        gasPrice(gp) {
            opts.gasPrice = R.test(gp, R.bigInt, 'arg0').toString().toLowerCase();
            return this;
        },
        gasPayer(addr) { console.warn("gasPayer is not supported in compat mode"); return this; },
        cache(hints) { console.warn("account.method :cache is not supported in compat mode"); return this; },
        asClause: (...args) => {
            const inputsLen = (coder.definition.inputs || []).length;
            R.ensure(inputsLen === args.length, `args count expected ${inputsLen}`);
            try {
                const data = coder.encode(...args);
                return {
                    to: acc.address,
                    value: value.toString().toLowerCase(),
                    data
                };
            }
            catch (err) {
                throw new R.BadParameter(`args can not be encoded (${err.message})`);
            }
        },
        call(...args) {
            const clause = this.asClause(...args);
            const explainer = connex.thor.explain([clause]);
            if (opts.caller)
                explainer.caller(opts.caller);
            if (opts.gas)
                explainer.gas(opts.gas);
            if (opts.gasPrice)
                explainer.gasPrice(opts.gasPrice);
            return explainer.execute().then(outputs => {
                const out = Object.assign(Object.assign({}, outputs[0]), { decoded: {} });
                if (!out.reverted && out.data !== '0x') {
                    out.decoded = coder.decode(out.data);
                }
                return out;
            });
        },
        transact(...args) {
            const clause = this.asClause(...args);
            return connex.vendor.sign('tx', [clause]);
        }
    };
};
const newEvent = (acc, jsonABI, connex) => {
    const coder = new abi.Event(JSON.parse(JSON.stringify(jsonABI)));
    const encode = (indexed) => {
        const topics = coder.encode(indexed);
        return {
            address: acc.address,
            topic0: topics[0] || undefined,
            topic1: topics[1] || undefined,
            topic2: topics[2] || undefined,
            topic3: topics[3] || undefined,
            topic4: topics[4] || undefined
        };
    };
    return {
        asCriteria: indexed => {
            try {
                return encode(indexed);
            }
            catch (err) {
                throw new R.BadParameter(`arg0: can not be encoded (${err.message})`);
            }
        },
        filter(indexed) {
            R.test(indexed, [{}], 'arg0');
            if (indexed.length === 0) {
                indexed = [{}];
            }
            const criteriaSet = indexed.map((o, i) => {
                try {
                    return encode(o);
                }
                catch (err) {
                    throw new R.BadParameter(`arg0.#${i}: can not be encoded (${err.message})`);
                }
            });
            const filter = connex.thor.filter('event', criteriaSet);
            return {
                range(r) { filter.range(r); return this; },
                order(o) { filter.order(o); return this; },
                cache() { console.warn('account.event :cache is not supported in compat mode'); return this; },
                apply(offset, limit) {
                    return filter.apply(offset, limit).then(events => events.map(e => {
                        const event = Object.assign(Object.assign({}, e), { decoded: {} });
                        event.decoded = coder.decode(event.data, event.topics);
                        return event;
                    }));
                }
            };
        }
    };
};
//# sourceMappingURL=data:application/json;base64,