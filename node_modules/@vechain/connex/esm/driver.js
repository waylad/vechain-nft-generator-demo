/* eslint-disable @typescript-eslint/no-unused-vars */
import { DriverNoVendor, SimpleNet } from '@vechain/connex-driver';
import { loadLibrary } from './script-loader';
import randomBytes from 'randombytes';
import { blake2b256 } from 'thor-devkit';
const BUDDY_SRC = 'https://unpkg.com/@vechain/connex-wallet-buddy@0.1';
const BUDDY_LIB_NAME = 'ConnexWalletBuddy';
/** the driver implements vendor methods only */
export class DriverVendorOnly {
    constructor(genesisId) {
        this.buddy = loadLibrary(BUDDY_SRC, BUDDY_LIB_NAME).then(lib => lib.create(genesisId, () => randomBytes(16).toString('hex'), val => blake2b256(val).toString('hex')));
    }
    get genesis() { throw new Error('not implemented'); }
    get head() { throw new Error('not implemented'); }
    pollHead() { throw new Error('not implemented'); }
    getBlock(revision) { throw new Error('not implemented'); }
    getTransaction(id, allowPending) { throw new Error('not implemented'); }
    getReceipt(id) { throw new Error('not implemented'); }
    getAccount(addr, revision) { throw new Error('not implemented'); }
    getCode(addr, revision) { throw new Error('not implemented'); }
    getStorage(addr, key, revision) { throw new Error('not implemented'); }
    explain(arg, revision, cacheHints) { throw new Error('not implemented'); }
    filterEventLogs(arg) { throw new Error('not implemented'); }
    filterTransferLogs(arg) { throw new Error('not implemented'); }
    signTx(msg, options) {
        return this.buddy.then(b => b.signTx(msg, options));
    }
    signCert(msg, options) {
        return this.buddy.then(b => b.signCert(msg, options));
    }
}
/** fully implemented Connex.Driver */
class FullDriver extends DriverNoVendor {
    constructor(node, genesis) {
        super(new SimpleNet(node), genesis);
        this.vd = new DriverVendorOnly(genesis.id);
    }
    signTx(msg, options) {
        return this.vd.signTx(msg, options);
    }
    signCert(msg, options) {
        return this.vd.signCert(msg, options);
    }
}
const cache = {};
/**
 * create full driver
 * @param node the url of thor node
 * @param genesis the enforced genesis block
 */
export function createFull(node, genesis) {
    const key = blake2b256(JSON.stringify({
        node,
        genesis
    })).toString('hex');
    let driver = cache[key];
    if (!driver) {
        cache[key] = driver = new FullDriver(node, genesis);
    }
    return driver;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJpdmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2RyaXZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxzREFBc0Q7QUFDdEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxTQUFTLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQTtBQUNsRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0saUJBQWlCLENBQUE7QUFFN0MsT0FBTyxXQUFXLE1BQU0sYUFBYSxDQUFBO0FBQ3JDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxhQUFhLENBQUE7QUFFeEMsTUFBTSxTQUFTLEdBQUcsb0RBQW9ELENBQUE7QUFDdEUsTUFBTSxjQUFjLEdBQUcsbUJBQW1CLENBQUE7QUFFMUMsZ0RBQWdEO0FBQ2hELE1BQU0sT0FBTyxnQkFBZ0I7SUFFekIsWUFBWSxTQUFpQjtRQUN6QixJQUFJLENBQUMsS0FBSyxHQUFHLFdBQVcsQ0FDcEIsU0FBUyxFQUNULGNBQWMsQ0FDakIsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUNwQixTQUFTLEVBQ1QsR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFDckMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUN6QyxDQUFDLENBQUE7SUFDTixDQUFDO0lBQ0QsSUFBSSxPQUFPLEtBQXdCLE1BQU0sSUFBSSxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQSxDQUFDLENBQUM7SUFDdkUsSUFBSSxJQUFJLEtBQWlDLE1BQU0sSUFBSSxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQSxDQUFDLENBQUM7SUFDN0UsUUFBUSxLQUEwQyxNQUFNLElBQUksS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUEsQ0FBQyxDQUFDO0lBQ3RGLFFBQVEsQ0FBQyxR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